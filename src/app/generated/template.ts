/* eslint-disable */
/* tslint:disable */
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
import 'reflect-metadata';

type ICarimboTempo = RavexSolution.Safe.Domain.Core.Entities.ICarimboTempo;
type IExclusaoLogica = RavexSolution.Safe.Domain.Core.Entities.IExclusaoLogica;

export function Etiqueta(value: string) { return Reflect.metadata('Etiqueta', value); }
export function Ordem(value: number) { return Reflect.metadata('Ordem', value); }
export function Visivel(value: boolean) { return Reflect.metadata('Visivel', value); }
export function ComprimentoMinimo(value: number) { return Reflect.metadata('ComprimentoMinimo', value); }
export function ComprimentoMaximo(value: number) { return Reflect.metadata('ComprimentoMaximo', value); }
export function Mascara(value: string) { return Reflect.metadata('Mascara', value); }
export function Mascaras(...value: string[]) { return Reflect.metadata('Mascaras', value); }
export function Formulario(adicionar: boolean, editar: boolean) { return Reflect.metadata('Formulario', { adicionar, editar }); }

export interface IPropriedade {
  Nome: string;
  Tipo: string;
  Obrigatorio: boolean;
  Etiqueta?: string;
  Ordem?: number;
  Visivel?: boolean;
  ComprimentoMinimo?: number;
  ComprimentoMaximo?: number;
  Mascara?: string;
  Mascaras?: string[];
  Formulario?: [boolean, boolean];
}

export namespace RavexSolution.Safe.Domain.Core.Entities {
  export interface ICarimboTempo {
    CriadoDataHora: DateTime;
    ModificadoDataHora: DateTime;
  }
  export interface IExclusaoLogica {
    Excluido: bool;
  }
}
export namespace RavexSolution.Safe.Domain.Entities {
  export class Pessoa implements IExclusaoLogica, ICarimboTempo {
    @Etiqueta('Identificação')
    @Ordem(999)
    @Formulario(false, false)
    public Id!: int;
    @Etiqueta('Criado')
    @Ordem(997)
    @Formulario(false, false)
    public CriadoDataHora!: DateTime;
    @Etiqueta('Modificado')
    @Ordem(997)
    @Formulario(false, false)
    public ModificadoDataHora!: DateTime;
    @Visivel(false)
    @Formulario(false, false)
    public Excluido!: bool;
    @Visivel(false)
    @Formulario(false, false)
    public CriadoPorId!: int;
    @Visivel(false)
    @Formulario(false, false)
    public ModificadoPorId!: int;
    @Formulario(true, true)
    @Mascaras('+55 (00) 0000-0000', '+55 (00) 00000-0000')
    public Telefone?: string;

    public NameOf() { return 'Pessoa'; }
    public NameOfProp(key: keyof Pessoa): string { return key; }
    public Propriedades(): IPropriedade[] {
      return ([
        {
          Nome: 'Id',
          Tipo: 'int',
          Obrigatorio: true,
          Etiqueta: 'Identificação',
          Ordem: 999,
          Formulario: [false,false],
        },
        {
          Nome: 'CriadoDataHora',
          Tipo: 'DateTime',
          Obrigatorio: true,
          Etiqueta: 'Criado',
          Ordem: 997,
          Formulario: [false,false],
        },
        {
          Nome: 'ModificadoDataHora',
          Tipo: 'DateTime',
          Obrigatorio: true,
          Etiqueta: 'Modificado',
          Ordem: 997,
          Formulario: [false,false],
        },
        {
          Nome: 'Excluido',
          Tipo: 'bool',
          Obrigatorio: true,
          Visivel: false,
          Formulario: [false,false],
        },
        {
          Nome: 'CriadoPorId',
          Tipo: 'int',
          Obrigatorio: true,
          Visivel: false,
          Formulario: [false,false],
        },
        {
          Nome: 'ModificadoPorId',
          Tipo: 'int',
          Obrigatorio: true,
          Visivel: false,
          Formulario: [false,false],
        },
        {
          Nome: 'Telefone',
          Tipo: 'string',
          Obrigatorio: false,
          Formulario: [true,true],
          Mascaras: ['+55 (00) 0000-0000','+55 (00) 00000-0000'],
        }
      ]);
    }
  }
  export class PessoaFisica extends Pessoa {
    @Ordem(0)
    @ComprimentoMinimo(5)
    @ComprimentoMaximo(150)
    public Nome!: string;
    @Ordem(1)
    @Etiqueta('CPF')
    @Mascara('000.000.000-00')
    @Formulario(true, false)
    public Cpf?: string;

    public override NameOf() { return 'PessoaFisica'; }
    public override NameOfProp(key: keyof PessoaFisica): string { return key; }
    public override Propriedades(): IPropriedade[] {
      return ([
        ...super.Propriedades(),
        {
          Nome: 'Nome',
          Tipo: 'string',
          Obrigatorio: true,
          Ordem: 0,
          ComprimentoMinimo: 5,
          ComprimentoMaximo: 150,
        },
        {
          Nome: 'Cpf',
          Tipo: 'string',
          Obrigatorio: false,
          Ordem: 1,
          Etiqueta: 'CPF',
          Mascara: '000.000.000-00',
          Formulario: [true,false],
        }
      ]);
    }
  }
  export class PessoaJuridica extends Pessoa {
    @Etiqueta('CNPJ')
    @Mascara('00.000.000/0000-00')
    @Ordem(3)
    @Formulario(true, false)
    public Cnpj!: string;
    @Etiqueta('Razão social')
    @ComprimentoMinimo(5)
    @ComprimentoMaximo(150)
    @Ordem(2)
    @Formulario(true, true)
    public RazaoSocial!: string;
    @Etiqueta('Nome fantasia')
    @ComprimentoMinimo(5)
    @ComprimentoMaximo(150)
    @Ordem(1)
    @Formulario(true, true)
    public NomeFantasia?: string;

    public override NameOf() { return 'PessoaJuridica'; }
    public override NameOfProp(key: keyof PessoaJuridica): string { return key; }
    public override Propriedades(): IPropriedade[] {
      return ([
        ...super.Propriedades(),
        {
          Nome: 'Cnpj',
          Tipo: 'string',
          Obrigatorio: true,
          Etiqueta: 'CNPJ',
          Mascara: '00.000.000/0000-00',
          Ordem: 3,
          Formulario: [true,false],
        },
        {
          Nome: 'RazaoSocial',
          Tipo: 'string',
          Obrigatorio: true,
          Etiqueta: 'Razão social',
          ComprimentoMinimo: 5,
          ComprimentoMaximo: 150,
          Ordem: 2,
          Formulario: [true,true],
        },
        {
          Nome: 'NomeFantasia',
          Tipo: 'string',
          Obrigatorio: false,
          Etiqueta: 'Nome fantasia',
          ComprimentoMinimo: 5,
          ComprimentoMaximo: 150,
          Ordem: 1,
          Formulario: [true,true],
        }
      ]);
    }
  }
}
